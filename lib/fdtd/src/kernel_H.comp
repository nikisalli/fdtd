// H step kernel

#version 450 core

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout( constant_id = 0 ) const uint DIM_X = 1024;
layout( constant_id = 1 ) const uint DIM_Y = 1024;

layout(set = 0, binding = 0) buffer Hb { double H[]; };
layout(set = 0, binding = 1) readonly buffer Eb { double E[]; };
layout(set = 0, binding = 2) readonly buffer Kb { double K[]; };
layout(set = 0, binding = 3) writeonly buffer p_out { uint p[]; };

struct color{
    float r,g,b,a;
};

layout(set = 0, binding = 4) readonly buffer color_buffer { color c[]; };

vec3 jet(float v){
    vec3 c = vec3(1, 1, 1);
    float dv, vmax = 1., vmin = -1.;
    if (v < vmin)
        v = vmin;
    if (v > vmax)
        v = vmax;
    dv = vmax - vmin;

    if (v < (vmin + 0.25 * dv)) {
        c.r = 0;
        c.g = 4 * (v - vmin) / dv;
    } else if (v < (vmin + 0.5 * dv)) {
        c.r = 0;
        c.b = 1 + 4 * (vmin + 0.25 * dv - v) / dv;
    } else if (v < (vmin + 0.75 * dv)) {
        c.r = 4 * (v - vmin - 0.5 * dv) / dv;
        c.b = 0;
    } else {
        c.g = 1 + 4 * (vmin + 0.75 * dv - v) / dv;
        c.b = 0;
    }
    return c;
}

vec3 m(float v){
    vec3 c = vec3(1, 1, 1);
    float dv, vmax = 1., vmin = -1.;
    if (v < vmin)
        v = vmin;
    if (v > vmax)
        v = vmax;
    dv = vmax - vmin;

    c.b = (v + 1.0) * 127;
    return c;
}

uint o(uint v, uint i, uint j){
    return v * DIM_X * DIM_Y + i * DIM_X + j;
}

void main (void){
    uint i = gl_GlobalInvocationID.x;
    uint j = gl_GlobalInvocationID.y;

    H[o(0,i,j)] = K[o(2,i,j)] * H[o(0,i,j)] + K[o(3,i,j)] * (E[o(0,i,j + 1)] - E[o(0,i,j)] + E[o(1,i,j)] - E[o(1,i + 1,j)]);
    // H[i][j] = K[2][i][j] * H[i][j] + K[3][i][j] * (E[0][i][j + 1] - E[0][i][j] + E[1][i][j] - E[1][i + 1][j]);

    vec3 plotcolor = vec3(c[o(0,i,j)].r, c[o(0,i,j)].g, c[o(0,i,j)].b);
    vec3 bytes = mix(plotcolor, jet(float(H[o(0,i,j)])), c[o(0,i,j)].a);
    p[o(0,j,i)] = (uint(bytes.b * 255) << 16) | (uint(bytes.g * 255) << 8) | uint(bytes.r * 255) | 0xFF000000;
}